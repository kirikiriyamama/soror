#!/usr/bin/env ruby

require 'optparse'
require 'soror'

Version = Soror::VERSION

options = { header: true, attributes: [], config: {}, credentials: {}, tag: {} }
OptionParser.new do |opt|
  opt.on(%q{--tags='KEY=VAL,KEY=VAL,...'}, Array) do |a|
    a.map{ |s| s.split('=') }.each{ |k, v| options[:tag][k] = v }
  end
  opt.on('-a', '--attributes=ATTR,ATTR,...', Array) { |a| options[:attributes] = a }
  opt.on('--[no-]header') { |v| options[:header] = v }
  opt.on('--profile-name=NAME') { |v| options[:credentials][:profile_name] = v }
  opt.on('--credentials-path=PATH') { |v| options[:credentials][:path] = v }
  opt.on('--access-key=KEY') { |v| options[:config][:access_key_id] = v }
  opt.on('--secret-key=KEY') { |v| options[:config][:secret_access_key] = v }
  opt.on('--region=REGION') { |v| options[:config][:region] = v }
  opt.parse!(ARGV)
end
fail OptionParser::MissingArgument, '--tags'       if options[:tag].empty?
fail OptionParser::InvalidArgument, '--attributes' if options[:attributes].empty?

unless options[:credentials].empty?
  options[:config][:credentials] = Aws::SharedCredentials.new(options[:credentials])
end
Soror.config.update(options[:config])

instances = Soror::EC2::Instance.search_by(options[:tag])
exit! if instances.empty?

result = instances.map{ |i| options[:attributes].map{ |a| i.send(a.intern) || '' } }
result.unshift(options[:attributes]) if options[:header]

width = result.transpose.map{ |row| row.map(&:length).max }
result.each{ |line| puts line.zip(width).map{ |a, w| a.ljust(w) }.join(' ') }
